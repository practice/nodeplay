// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.nodeplay.node.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.nodeplay.node.model.AppUser;
import org.nodeplay.node.model.Node;
import org.nodeplay.node.model.NodeDataOnDemand;
import org.nodeplay.node.model.NodeRevisionDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect NodeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: NodeDataOnDemand: @Component;
    
    private Random NodeDataOnDemand.rnd = new SecureRandom();
    
    private List<Node> NodeDataOnDemand.data;
    
    @Autowired
    private NodeRevisionDataOnDemand NodeDataOnDemand.nodeRevisionDataOnDemand;
    
    public Node NodeDataOnDemand.getNewTransientNode(int index) {
        Node obj = new Node();
        setChanged(obj, index);
        setCreated(obj, index);
        setTitle(obj, index);
        setUser(obj, index);
        return obj;
    }
    
    public void NodeDataOnDemand.setChanged(Node obj, int index) {
        Date changed = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setChanged(changed);
    }
    
    public void NodeDataOnDemand.setCreated(Node obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void NodeDataOnDemand.setTitle(Node obj, int index) {
        String title = "title_" + index;
        if (title.length() > 128) {
            title = title.substring(0, 128);
        }
        obj.setTitle(title);
    }
    
    public void NodeDataOnDemand.setUser(Node obj, int index) {
        AppUser user = null;
        obj.setUser(user);
    }
    
    public Node NodeDataOnDemand.getSpecificNode(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Node obj = data.get(index);
        Long id = obj.getId();
        return Node.findNode(id);
    }
    
    public Node NodeDataOnDemand.getRandomNode() {
        init();
        Node obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Node.findNode(id);
    }
    
    public boolean NodeDataOnDemand.modifyNode(Node obj) {
        return false;
    }
    
    public void NodeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Node.findNodeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Node' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Node>();
        for (int i = 0; i < 10; i++) {
            Node obj = getNewTransientNode(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
