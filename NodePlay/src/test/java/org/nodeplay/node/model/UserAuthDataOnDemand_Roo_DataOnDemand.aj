// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.nodeplay.node.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.nodeplay.node.model.AppUser;
import org.nodeplay.node.model.UserAuth;
import org.nodeplay.node.model.UserAuthDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect UserAuthDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserAuthDataOnDemand: @Component;
    
    private Random UserAuthDataOnDemand.rnd = new SecureRandom();
    
    private List<UserAuth> UserAuthDataOnDemand.data;
    
    public UserAuth UserAuthDataOnDemand.getNewTransientUserAuth(int index) {
        UserAuth obj = new UserAuth();
        setName(obj, index);
        setPass(obj, index);
        setUser(obj, index);
        return obj;
    }
    
    public void UserAuthDataOnDemand.setName(UserAuth obj, int index) {
        String name = "name_" + index;
        if (name.length() > 32) {
            name = name.substring(0, 32);
        }
        obj.setName(name);
    }
    
    public void UserAuthDataOnDemand.setPass(UserAuth obj, int index) {
        String pass = "pass_" + index;
        if (pass.length() > 32) {
            pass = pass.substring(0, 32);
        }
        obj.setPass(pass);
    }
    
    public void UserAuthDataOnDemand.setUser(UserAuth obj, int index) {
        AppUser user = null;
        obj.setUser(user);
    }
    
    public UserAuth UserAuthDataOnDemand.getSpecificUserAuth(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserAuth obj = data.get(index);
        Long id = obj.getId();
        return UserAuth.findUserAuth(id);
    }
    
    public UserAuth UserAuthDataOnDemand.getRandomUserAuth() {
        init();
        UserAuth obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return UserAuth.findUserAuth(id);
    }
    
    public boolean UserAuthDataOnDemand.modifyUserAuth(UserAuth obj) {
        return false;
    }
    
    public void UserAuthDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserAuth.findUserAuthEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserAuth' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserAuth>();
        for (int i = 0; i < 10; i++) {
            UserAuth obj = getNewTransientUserAuth(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
